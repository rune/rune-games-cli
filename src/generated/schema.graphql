"""
A location in a connection that can be used for resuming pagination.
"""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

type Game {
  blurredImgDataUrl: String

  """
  Challenge number that increases every day by 1 at tango.next_challenge_at
  """
  challengeId: Int!

  """
  (Denormalized) Total number of comments .
  """
  commentCount: Int!
  createdAt: Datetime
  devTeamId: Int!
  id: Int!

  """
  NULL means that the challenge is disabled. Once enabled, challenge cannot be disabled.
  """
  nextChallengeAt: Datetime

  """
  Sum of the deprecated game_session table rows
  with duration longer than 3s
  as well as the new game_play table rows
  with duration longer than 3s.
  Note that the sum exludes game plays longer than 86.4s created between 2022-05-26 and 2022-05-31 due to RUNE-7891.
  """
  playCount: Int!
  title: String!
  updatedAt: Datetime
}

"""
A condition to be used against `Game` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GameCondition {
  """
  Checks for equality with the object’s `devTeamId` field.
  """
  devTeamId: Int

  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `nextChallengeAt` field.
  """
  nextChallengeAt: Datetime

  """
  Checks for equality with the object’s `title` field.
  """
  title: String
}

"""
A connection to a list of `Game` values.
"""
type GamesConnection {
  """
  A list of edges which contains the `Game` and cursor to aid in pagination.
  """
  edges: [GamesEdge!]!

  """
  A list of `Game` objects.
  """
  nodes: [Game!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Game` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Game` edge in the connection.
"""
type GamesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Game` at the end of the edge.
  """
  node: Game!
}

"""
Methods to use when ordering `Game`.
"""
enum GamesOrderBy {
  DEV_TEAM_ID_ASC
  DEV_TEAM_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  NEXT_CHALLENGE_AT_ASC
  NEXT_CHALLENGE_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TITLE_ASC
  TITLE_DESC
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
}

"""
The root query type which gives access points into the data universe.
"""
type Query {
  gameById(id: Int!): Game
  gameByTitle(title: String!): Game

  """
  Reads and enables pagination through a set of `Game`.
  """
  games(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameCondition

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `Game`.
    """
    orderBy: [GamesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GamesConnection

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
}

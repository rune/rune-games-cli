input CheckVerificationInput {
  clientMutationId: String
  verificationToken: String!
}

type CheckVerificationPayload {
  authToken: String
  clientMutationId: String
}

input CreateGameInput {
  clientMutationId: String
  logo: Upload
  title: String!
}

type CreateGamePayload {
  clientMutationId: String
  game: Game!
}

input CreateGameVersionInput {
  challengeSupport: Boolean
  clientMutationId: String
  content: Upload!
  gameId: Int!
}

type CreateGameVersionPayload {
  clientMutationId: String
  gameVersion: GameVersion!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

type DevTeam {
  createdAt: Datetime!
  email: String

  """Reads and enables pagination through a set of `Game`."""
  games(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Game`."""
    orderBy: [GamesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GamesConnection!
  handle: String
  id: Int!
  updatedAt: Datetime!
}

"""
A condition to be used against `DevTeam` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input DevTeamCondition {
  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `handle` field."""
  handle: String

  """Checks for equality with the object’s `id` field."""
  id: Int
}

"""
Represents an update to a `DevTeam`. Fields that are set will be updated.
"""
input DevTeamPatch {
  handle: String
}

"""A connection to a list of `DevTeam` values."""
type DevTeamsConnection {
  """
  A list of edges which contains the `DevTeam` and cursor to aid in pagination.
  """
  edges: [DevTeamsEdge!]!

  """A list of `DevTeam` objects."""
  nodes: [DevTeam!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `DevTeam` you could get from the connection."""
  totalCount: Int!
}

"""A `DevTeam` edge in the connection."""
type DevTeamsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DevTeam` at the end of the edge."""
  node: DevTeam!
}

"""Methods to use when ordering `DevTeam`."""
enum DevTeamsOrderBy {
  EMAIL_ASC
  EMAIL_DESC
  HANDLE_ASC
  HANDLE_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Game {
  blurredImgDataUrl: String

  """
  Challenge number that increases every day by 1 at tango.next_challenge_at
  """
  challengeId: Int!

  """(Denormalized) Total number of comments ."""
  commentCount: Int!
  createdAt: Datetime

  """Reads a single `DevTeam` that is related to this `Game`."""
  devTeam: DevTeam
  devTeamId: Int!

  """Reads and enables pagination through a set of `GameVersion`."""
  gameVersions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameVersionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GameVersion`."""
    orderBy: [GameVersionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GameVersionsConnection!
  id: Int!

  """
  NULL means that the challenge is disabled. Once enabled, challenge cannot be disabled.
  """
  nextChallengeAt: Datetime

  """
  Sum of the deprecated game_session table rows
  with duration longer than 3s
  as well as the new game_play table rows
  with duration longer than 3s.
  Note that the sum exludes game plays longer than 86.4s created between 2022-05-26 and 2022-05-31 due to RUNE-7891.
  """
  playCount: Int!
  title: String!
  updatedAt: Datetime
}

"""
A condition to be used against `Game` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GameCondition {
  """Checks for equality with the object’s `devTeamId` field."""
  devTeamId: Int

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `nextChallengeAt` field."""
  nextChallengeAt: Datetime
}

input GameFile {
  content: String
  path: String!
  size: Int!
}

type GameVersion {
  """Reads a single `Game` that is related to this `GameVersion`."""
  game: Game
  gameId: Int!
  gameVersionId: Int!
  status: GameVersionStatus!
  supportsChallenge: Boolean!
}

"""
A condition to be used against `GameVersion` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GameVersionCondition {
  """Checks for equality with the object’s `gameId` field."""
  gameId: Int
}

enum GameVersionStatus {
  ACTIVE
  INACTIVE
  IN_REVIEW
  UPLOADING
  WAITING_FOR_RELEASE
}

"""A connection to a list of `GameVersion` values."""
type GameVersionsConnection {
  """
  A list of edges which contains the `GameVersion` and cursor to aid in pagination.
  """
  edges: [GameVersionsEdge!]!

  """A list of `GameVersion` objects."""
  nodes: [GameVersion!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GameVersion` you could get from the connection."""
  totalCount: Int!
}

"""A `GameVersion` edge in the connection."""
type GameVersionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GameVersion` at the end of the edge."""
  node: GameVersion!
}

"""Methods to use when ordering `GameVersion`."""
enum GameVersionsOrderBy {
  GAME_ID_ASC
  GAME_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Game` values."""
type GamesConnection {
  """
  A list of edges which contains the `Game` and cursor to aid in pagination.
  """
  edges: [GamesEdge!]!

  """A list of `Game` objects."""
  nodes: [Game!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Game` you could get from the connection."""
  totalCount: Int!
}

"""A `Game` edge in the connection."""
type GamesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Game` at the end of the edge."""
  node: Game!
}

"""Methods to use when ordering `Game`."""
enum GamesOrderBy {
  DEV_TEAM_ID_ASC
  DEV_TEAM_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  NEXT_CHALLENGE_AT_ASC
  NEXT_CHALLENGE_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  checkVerification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CheckVerificationInput!
  ): CheckVerificationPayload!
  createGame(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGameInput!
  ): CreateGamePayload!
  createGameVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGameVersionInput!
  ): CreateGameVersionPayload!
  startVerification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: StartVerificationInput!
  ): StartVerificationPayload!

  """Updates a single `DevTeam` using a unique key and a patch."""
  updateDevTeamByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDevTeamByEmailInput!
  ): UpdateDevTeamPayload

  """Updates a single `DevTeam` using a unique key and a patch."""
  updateDevTeamByHandle(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDevTeamByHandleInput!
  ): UpdateDevTeamPayload

  """Updates a single `DevTeam` using a unique key and a patch."""
  updateDevTeamById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDevTeamByIdInput!
  ): UpdateDevTeamPayload
  validateGame(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ValidateGameInput!
  ): ValidateGamePayload!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query {
  devTeamByEmail(email: String!): DevTeam
  devTeamByHandle(handle: String!): DevTeam
  devTeamById(id: Int!): DevTeam

  """Reads and enables pagination through a set of `DevTeam`."""
  devTeams(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DevTeamCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `DevTeam`."""
    orderBy: [DevTeamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DevTeamsConnection
  gameById(id: Int!): Game
  gameVersionByGameIdAndGameVersionId(gameId: Int!, gameVersionId: Int!): GameVersion

  """Reads and enables pagination through a set of `GameVersion`."""
  gameVersions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameVersionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GameVersion`."""
    orderBy: [GameVersionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GameVersionsConnection

  """Reads and enables pagination through a set of `Game`."""
  games(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Game`."""
    orderBy: [GamesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GamesConnection
  me: DevTeam!

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
}

input StartVerificationInput {
  clientMutationId: String
  email: String!
}

type StartVerificationPayload {
  clientMutationId: String
  verificationToken: String!
}

"""All input for the `updateDevTeamByEmail` mutation."""
input UpdateDevTeamByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!

  """
  An object where the defined keys will be set on the `DevTeam` being updated.
  """
  patch: DevTeamPatch!
}

"""All input for the `updateDevTeamByHandle` mutation."""
input UpdateDevTeamByHandleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  handle: String!

  """
  An object where the defined keys will be set on the `DevTeam` being updated.
  """
  patch: DevTeamPatch!
}

"""All input for the `updateDevTeamById` mutation."""
input UpdateDevTeamByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `DevTeam` being updated.
  """
  patch: DevTeamPatch!
}

"""The output of our update `DevTeam` mutation."""
type UpdateDevTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DevTeam` that was updated by this mutation."""
  devTeam: DevTeam

  """An edge for our `DevTeam`. May be used by Relay 1."""
  devTeamEdge(
    """The method to use when ordering `DevTeam`."""
    orderBy: [DevTeamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DevTeamsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ValidateGameInput {
  clientMutationId: String
  files: [GameFile!]!
}

type ValidateGamePayload {
  clientMutationId: String
  errors: [String!]!
  valid: Boolean!
}
